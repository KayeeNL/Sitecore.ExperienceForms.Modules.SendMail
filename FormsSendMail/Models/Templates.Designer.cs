
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DynamicPlaceholderGrids.Models
{
  #region Designer generated code

  using System;
  using Sitecore;
  using Sitecore.Diagnostics;
  using Sitecore.Data.Items;
  using Sitecore.Data.Fields;
  using Sitecore.Data;
  
      
  /// <summary>Represents the "Css Class" template.</summary>
  public partial class CssClass : CustomItem
  {
    public static readonly ID TemplateID = ID.Parse("{00000000-0000-0000-0000-000000000000}");

    public CssClass(Item item) : base(item) {
    }

    public static class FieldIds {
      
      public static readonly ID CssClasses = ID.Parse("{F4F3CF95-EE5A-49D4-9C05-E4E49BD33B68}");

    }
    
    public static class FieldNames {
      
      public static readonly string CssClasses = "Css Class";

    }

    
    /// <summary>Gets or sets the "Css Class" field.</summary>
    public string CssClasses 
    {
      get 
      {
        return this.InnerItem[FieldIds.CssClasses];
      }
      set
      {
        this.InnerItem[FieldIds.CssClasses] = value;
      }
    }
  
    public static CssClass Create(Item item) 
    {
      return new CssClass(item);
    }

    public static implicit operator Item (CssClass item)
    {
      if (item == null)
      {
        return null;
      }

      return item.InnerItem;
    }

    public static explicit operator CssClass(Item item)
    {
      if (item == null)
      {
        return null;
      }

      if (item.TemplateID != TemplateID)
      {
        return null;
      }

      return Create(item);
    }
  }
      
  /// <summary>Represents the "Css Class Folder" template.</summary>
  public partial class CssClassFolder : CustomItem
  {
    public static readonly ID TemplateID = ID.Parse("{00000000-0000-0000-0000-000000000000}");

    public CssClassFolder(Item item) : base(item) {
    }

    public static class FieldIds {
      
    }
    
    public static class FieldNames {
      
    }

    
    public static CssClassFolder Create(Item item) 
    {
      return new CssClassFolder(item);
    }

    public static implicit operator Item (CssClassFolder item)
    {
      if (item == null)
      {
        return null;
      }

      return item.InnerItem;
    }

    public static explicit operator CssClassFolder(Item item)
    {
      if (item == null)
      {
        return null;
      }

      if (item.TemplateID != TemplateID)
      {
        return null;
      }

      return Create(item);
    }
  }
      
  /// <summary>Represents the "Sample Item" template.</summary>
  public partial class SampleItem : CustomItem
  {
    public static readonly ID TemplateID = ID.Parse("{00000000-0000-0000-0000-000000000000}");

    public SampleItem(Item item) : base(item) {
    }

    public static class FieldIds {
      
      public static readonly ID Title = ID.Parse("{75577384-3C97-45DA-A847-81B00500E250}");

      public static readonly ID Text = ID.Parse("{A60ACD61-A6DB-4182-8329-C957982CEC74}");

    }
    
    public static class FieldNames {
      
      public static readonly string Title = "Title";

      public static readonly string Text = "Text";

    }

    
    /// <summary>Gets or sets the "Title" field.</summary>
    public string Title 
    {
      get 
      {
        return this.InnerItem[FieldIds.Title];
      }
      set
      {
        this.InnerItem[FieldIds.Title] = value;
      }
    }
  
    /// <summary>Gets or sets the "Text" field.</summary>
    public string Text 
    {
      get 
      {
        return this.InnerItem[FieldIds.Text];
      }
      set
      {
        this.InnerItem[FieldIds.Text] = value;
      }
    }
  
    public static SampleItem Create(Item item) 
    {
      return new SampleItem(item);
    }

    public static implicit operator Item (SampleItem item)
    {
      if (item == null)
      {
        return null;
      }

      return item.InnerItem;
    }

    public static explicit operator SampleItem(Item item)
    {
      if (item == null)
      {
        return null;
      }

      if (item.TemplateID != TemplateID)
      {
        return null;
      }

      return Create(item);
    }
  }
      
  /// <summary>Represents the "Html Tag Folder" template.</summary>
  public partial class HtmlTagFolder : CustomItem
  {
    public static readonly ID TemplateID = ID.Parse("{00000000-0000-0000-0000-000000000000}");

    public HtmlTagFolder(Item item) : base(item) {
    }

    public static class FieldIds {
      
    }
    
    public static class FieldNames {
      
    }

    
    public static HtmlTagFolder Create(Item item) 
    {
      return new HtmlTagFolder(item);
    }

    public static implicit operator Item (HtmlTagFolder item)
    {
      if (item == null)
      {
        return null;
      }

      return item.InnerItem;
    }

    public static explicit operator HtmlTagFolder(Item item)
    {
      if (item == null)
      {
        return null;
      }

      if (item.TemplateID != TemplateID)
      {
        return null;
      }

      return Create(item);
    }
  }
      
  /// <summary>Represents the "Html Tag" template.</summary>
  public partial class HtmlTag : CustomItem
  {
    public static readonly ID TemplateID = ID.Parse("{00000000-0000-0000-0000-000000000000}");

    public HtmlTag(Item item) : base(item) {
    }

    public static class FieldIds {
      
      public static readonly ID Tag = ID.Parse("{E8A6BF20-AA31-4A9D-AD23-B6573CD52514}");

    }
    
    public static class FieldNames {
      
      public static readonly string Tag = "Html Tag";

    }

    
    /// <summary>Gets or sets the "Html Tag" field.</summary>
    public string Tag 
    {
      get 
      {
        return this.InnerItem[FieldIds.Tag];
      }
      set
      {
        this.InnerItem[FieldIds.Tag] = value;
      }
    }
  
    public static HtmlTag Create(Item item) 
    {
      return new HtmlTag(item);
    }

    public static implicit operator Item (HtmlTag item)
    {
      if (item == null)
      {
        return null;
      }

      return item.InnerItem;
    }

    public static explicit operator HtmlTag(Item item)
    {
      if (item == null)
      {
        return null;
      }

      if (item.TemplateID != TemplateID)
      {
        return null;
      }

      return Create(item);
    }
  }
      
  /// <summary>Represents the "_Simple Container Parameters" template.</summary>
  public partial class __SimpleContainerParameters : CustomItem
  {
    public static readonly ID TemplateID = ID.Parse("{00000000-0000-0000-0000-000000000000}");

    public __SimpleContainerParameters(Item item) : base(item) {
    }

    public static class FieldIds {
      
      public static readonly ID HideContainer = ID.Parse("{22D04661-2FD6-4835-9831-56EC13F0090E}");

      public static readonly ID CssClasses = ID.Parse("{D3AF9D43-B373-4537-B3CC-69DEC5FB19B7}");

      public static readonly ID ContainerTag = ID.Parse("{24BF21C5-F2C0-4D82-B261-E1157269B5C3}");

      public static readonly ID ContainerId = ID.Parse("{68B19F56-73F9-4BC2-883C-F39910E21770}");

    }
    
    public static class FieldNames {
      
      public static readonly string HideContainer = "HideContainer";

      public static readonly string CssClasses = "CssClasses";

      public static readonly string ContainerTag = "ContainerTag";

      public static readonly string ContainerId = "ContainerId";

    }

    
    /// <summary>Gets or sets the "HideContainer" field.</summary>
    public bool HideContainer 
    {
      get 
      {
        return MainUtil.GetBool(this.InnerItem[FieldIds.HideContainer], false);
      }
      set 
      {
        this.InnerItem[FieldIds.HideContainer] = value ? "1" : string.Empty;
      }
    }
  
    /// <summary>Gets the "CssClasses" field.</summary>
    public MultilistField CssClasses 
    {
      get 
      {
        return this.InnerItem.Fields[FieldIds.CssClasses];
      }
    }
  
    /// <summary>Gets the "ContainerTag" field.</summary>
    public LookupField ContainerTag 
    {
      get 
      {
        return this.InnerItem.Fields[FieldIds.ContainerTag];
      }
    }
  
    /// <summary>Gets or sets the "ContainerId" field.</summary>
    public string ContainerId 
    {
      get 
      {
        return this.InnerItem[FieldIds.ContainerId];
      }
      set
      {
        this.InnerItem[FieldIds.ContainerId] = value;
      }
    }
  
    public static __SimpleContainerParameters Create(Item item) 
    {
      return new __SimpleContainerParameters(item);
    }

    public static implicit operator Item (__SimpleContainerParameters item)
    {
      if (item == null)
      {
        return null;
      }

      return item.InnerItem;
    }

    public static explicit operator __SimpleContainerParameters(Item item)
    {
      if (item == null)
      {
        return null;
      }

      if (item.TemplateID != TemplateID)
      {
        return null;
      }

      return Create(item);
    }
  }
      
  /// <summary>Represents the "_Multicolumn Equal Sizes Parameters" template.</summary>
  public partial class __MulticolumnEqualSizesParameters : CustomItem
  {
    public static readonly ID TemplateID = ID.Parse("{AD3EE504-C109-46AA-9689-4C7881FC09E4}");

    public __MulticolumnEqualSizesParameters(Item item) : base(item) {
    }

    public static class FieldIds {
      
      public static readonly ID HideRow = ID.Parse("{0A086007-F76D-4475-A4C3-D9994C1959D6}");

      public static readonly ID RowCssClasses = ID.Parse("{95757897-D614-4E16-8E43-7E9DC6DCFC1B}");

      public static readonly ID ColumnCssClasses = ID.Parse("{0CE9031B-FF0B-451C-8879-D4AC55D5574E}");

    }
    
    public static class FieldNames {
      
      public static readonly string HideRow = "HideRow";

      public static readonly string RowCssClasses = "RowCssClasses";

      public static readonly string ColumnCssClasses = "ColumnCssClasses";

    }

    
    /// <summary>Gets or sets the "HideRow" field.</summary>
    public bool HideRow 
    {
      get 
      {
        return MainUtil.GetBool(this.InnerItem[FieldIds.HideRow], false);
      }
      set 
      {
        this.InnerItem[FieldIds.HideRow] = value ? "1" : string.Empty;
      }
    }
  
    /// <summary>Gets the "RowCssClasses" field.</summary>
    public MultilistField RowCssClasses 
    {
      get 
      {
        return this.InnerItem.Fields[FieldIds.RowCssClasses];
      }
    }
  
    /// <summary>Gets the "ColumnCssClasses" field.</summary>
    public MultilistField ColumnCssClasses 
    {
      get 
      {
        return this.InnerItem.Fields[FieldIds.ColumnCssClasses];
      }
    }
  
    public static __MulticolumnEqualSizesParameters Create(Item item) 
    {
      return new __MulticolumnEqualSizesParameters(item);
    }

    public static implicit operator Item (__MulticolumnEqualSizesParameters item)
    {
      if (item == null)
      {
        return null;
      }

      return item.InnerItem;
    }

    public static explicit operator __MulticolumnEqualSizesParameters(Item item)
    {
      if (item == null)
      {
        return null;
      }

      if (item.TemplateID != TemplateID)
      {
        return null;
      }

      return Create(item);
    }
  }
  
  #endregion
}

#pragma warning restore 1591
